What is Ansible? 

Ansible is one of configuration management tool 

Configuration management: 
  - installing softwares on multiple systems using the master slave configuration (wherein on your master you would have the Ansible installed, then on slaves you just have to specify on which machine what to install and everything will be done automatically)
      - time saving and error free (because of automation)


The only requirment of Ansible is preinstalled Python3. (both on master and slave)

How does Ansible work?
    at the core of this configuration management tool you have something called as Ansible Playbooks. 
      - An Ansible Playbook is a place where you basically put on code what exactly you want to configure on the remote systems 
        - so whatever you write on the Ansible playbooks is executed by Ansible on the Remote system.
          - Ansible Playbook plays a key role in the functioning of Ansible ecosystem 

Ansible Playbooks are basically written in YMAL
        - YMAL is yet another markup language

example:
      Josh is a guy who basically wnats to configure (= install) remote systems with a particular software (in this case Apache Tomcat).
          how would he do that - 
            - Josh basically write an Ansible playbook, in which he spacify what kind of software he wants install on the remote systems.
            - now Once he specified everything in the Ansible playbook, now he will deploy this Ansible playbook on the Ansible Master and on the Ansible slaves all these softwares will be installed

Instead of going to each system to install the software, he will write it in place (in Ansible Playbook) and in that playbook we will be defining all the tasks that has to be done on the remote systems on one central place that is the Ansible Master. Run that playbook, everything will be executed on the remote systems. 

(code file = playbook)


# Ansible Architecture 
  - basically you have something called as an Administator -- he will basically write an Ansible Playbook -- which is nothing but what all do i want to accomplish on the remote systems -- that i will be specifying in this code file 
  - so once i specified everything in the code file the next thing would be, to put this code file on the Ansible Master 
  - i will put this playbook on the Ansible master 
  - Ansible Master in turn has the inventories and has somthing called as Modules

  # what are Inventories? 
      - Inventories are basically code files which will have the host IP address
          - means, all these slaves that exit on the ansible cluster are called as Ansible Hosts

      - Now how would Master know which host do i connect to --- that information basically Ansible gathers from Inventories
          - in the Inventories, basically you can group certain number of slaves and call them something (like production, testing) and you can name each slave as a name as well 

      Nomenculater, grouping, everything happens in the Inventories 


      #What is the purpose of naming them? 
          - the purpose is that when i'm writing playbooks, i don't have to worry about which IP address is my host on or which IP address should this command be executed on

        - all we mention in the playbook is --- on what what servers (what group of servers or what name of servers) do i have to execute this commands on --- and basically those names are resloved (= pulled, retrieved, gathered, taken) from the inventories which exist on the Ansible master and then your request is executed
        - all the IP addresses that you have or all the remote systems ehich you are connected to the Ansible master, their information is stored in the Inventories 

    # What are Modules?
        - Modules are nothing but pre-built functions in Ansible 
            - Pre-built means if there is anything that you have to do using Ansible, you should first check weather do you have a Module on that or Not.   
              - if you have a Module on that particular task, it is better to call that Module directly in the Playbook than to write the logic in the Playbook again. 

    # What are Ansible Hosts? 
        - these hosts are nothing but slaves
            - And in order for the Ansible Master to connect to these Hosts, it uses the SSH connection. 

        # What we have to do is ---- our Master should be able to SSH into your Host without any password and without putting any key.
            - basically, if that SSH connection is being formed, then your Ansible Master can also communicate with all the Hosts which are present on the cluster.
            - there are only 2 conditions 
                  - the SSH should be enabled, and 
                  - the Python itself should be installed on all the Hosts which want to connect to the Ansible Master.
                        # if these two conditions are full filled, you Ansible Master can successfully connect to all the Hosts that are there on the cluster


#advantages
    - Cloud provides better operations and security to its clients 
    - increased team efficiency 
    - Patching updates went from a multi-day process to 45 minutes 


# Creating Ansible Playbooks 
    - Ansible playbook is the code part of what Ansible does in it's day-to-day activity.
        - whatever you write inside the Ansible playbook is actually executed on all the servers, which are basically connected to the Ansible server (master).


    # Playbook 
        - A Playbook means a book of plays (a playbook essentially should have lot of plays)
            - the first level in the tree of the playbook comes "Play". (you can have multiple plays in a playbook)

        # play 
          - A play is the combination of tasks that you want to do on a particular host. 
              - so you define the play and inside the play you define the tasks that has to be done.
                  - each task has something called as module, Notify, Handler and lot of other things as well.

          - So in a play you can have any number of taks written and these tasks are executed on a particular host using a particular condition --- that's why it is called a play.

Say we want to create a playbook with two plays with following tasks
1. Execute a command in host1
2. Execute a script in host1
3. Execute a script in host2
4. Install nginx in host2

#example playbook 

---
- hosts: host1
  sudo: yes
  name: play 1
  tasks: 
      - name: Execute command 'Date'
        command: date
      - name: Execute script on server 
        script: test_script.sh


- hosts: host2
  name: play 2
  sudo: yes
  tasks: 
      - name: Execute scripts on server
        script: test_script.sh
      - name: Install nginx
        apt: name=nginx state=latest


# plays start with symbol (-)
# in the above example we have two plays 
# exach play has 2 tasks

    - name: Execute command 'Date' --- this is the discriptive name of the task -- this does not get executed, this could be any string that you want to give.
    - command: date ---- second thing is you will have to pass the command -- now what command has to be executed on terminal that same exact command you have to mention here

        # Every task will start with the name and has to be followed by an hyphen (-)
            - Hyphen marks the begining of a new task 
            
        # Now whenever you starting a new play, in that case also you have to begin with a Hyphen (-), you specify the host name (i.e., hosts: host1)
          - name that we are specifying for the hosts over here has to exactly match with the  /etc/ansible/hosts
          - "hosts" can have one host or group of hosts from the inventory file /etc/ansible/hosts

        # wether that particular command has to use sudo, we have to mention that (sudo: yes)
        # name of the play, it could be anything, just a string you can pass in anything over here 

      # apt: name=nginx state=latest --- in this state=latest -- this implies version that we want to install

      # For Ubuntu we use "apt", it differes based on the OS of the machine.

    # we always start a YAML file with 3 Hyphens (---)

      # each play is like a dictionary and has name, hosts, tasks, Order doesn't matter.
      # So the playbook is a list of dictionaries



















        
      




        





